-- InProgress
Lose unnecessary accessors (in progress)
hardwarelib stack manipulation instructions (and unit tests)
  BUY
  SELL

-- BUGS

-- TODO
hardwarelib need some conditional jump tests which would incur reference violation if they jumped
    both jumping (ref violation) and not jumping (no ref violation)
hardwarelib do active base table entry thing
hardwareLib note - when changing code banks, observe q/t word mode, and arithfault modes
hardwarelib UPI send/ack mechanism
hardwarelib Figure out how to do channel programs
  do we need a cleaner IO path?
  we'd still like word and byte operations... don't we?
hardwarelib Rewrite disk (and maybe tape) devices using async IO
hardwarelib All Device objects: add Builder class, make constructors private
hardwarelib Device.IoInfo objects: add Builder class, make constructors private

hardwarelib missing jump instructions (and unit tests)
  JB
  JNB
hardwarelib storage-to-storage instructions (and unit tests)
  BT
  BIM
  BIC
  BIMT
  BICL
  BIML
  BN
  BBN
  BTP
  BTU
hardwarelib string instructions (and unit tests)
  LS
  LSA
  SS
  TES
  TNES
hardwarelib address space management instructions (and unit tests)
  LBU
  LBE
  LBUD
  LBED
  SBUD
  SBED
  SBU
  LBN
  TRA
  TVA
  DABT
hardwarelib extended mode procedure call instructions (and unit tests)
  GOTO
  CALL
  LOCL
  RTN
hardwarelib basic mode procedure call instructions (and unit tests)
  LBJ
  LIJ
  LDJ
hardwarelib queuing instructions (maybe later)
hardwarelib paging control instructions (never)
hardwarelib activity control instructions (and unit tests)
  LD
  SD
  LPD
  SPD
  LUD
  SUD
  LAE
  UR
  ACEL
  DCEL
  SKQT
hardwarelib interrupt control instructinos (and unit tests)
  ER
  SGNL
  PAIJ
  AAIJ
hardwarelib dayclock control instructions (and unit tests)
  LRD
  SMD
  RMD
  LMC
  SDMN
  SDMS
  SDMF
  RDC
hardwarelib UPI operations control instructions (and unit tests)
  SEND
  ACK
hardwarelib system instrumentation instructions
  LBRX
  CJHE
  SJH
hardwarelib performance monitoring instructions (never)
hardwarelib special instructions (and unit tests)
  EX
  EXR
  DCB
hardwarelib floating point binary instructions (and unit tests)
  FA
  FAN
  DFA
  DFAN
  FM
  DFM
  FD
  DFD
  LUF
  DFU
  LCF
  DFP,DLCF
  FEL
  FCL
  MCDU
  CDU
hardwarelib fixed point decimal instructions (and unit tests)
  ADE
  DADE
  SDE
  DSDE
  DEI
  DDEI
  IDE
  DIDE
  BDE
  DEB
  EDDE
hardwarelib search and masked search instructions (and unit tests)
  SE
  SNE
  SNG
  SG
  SW
  SNW
  MSE
  MSNE
  MSLE,MSNG
  MSG
  MSW
  MSNW
  MASL
  MASG

minalib unit tests for string value generation
minalib unit tests for node references - need to check results
minalib support special form for JGD instruction
minalib support special form for BT instruction
minalib support node references on LHS of $EQU statements
minalib need to put partial-words into the dictionary - and should we allow these as expressions in j-field?
minalib remove UndefinedReferenceDiagnostic (I think...)
minalib use DiagnosticDirective for stuff
pick up the rest of the unit tests we need to do but haven't yet
minalib do we need microstrings?
minalib $USE (A.2.8) specifies base register to use if none given
minalib add test cases for interrupts (many of them already marked TODO)
minalib float values - firm this up (how do we support it)
minalib data generation - floats
minalib can we do implicit base register (and do it right)?  also with the $LIT directive...
minalib make sure we don't propagate flagged attribute in any of the operators
minalib support user-defined functions
minalib allow expression list inside literal which is part of expression
  e.g., ((005, 007) + 12)

minalib functions
  $ILCN
  $L0
  $L1
  $LCB
  $LCFV
  $LCN
  $SSS
  $LCV
  $NODE (an empty node - this is maybe a built-in value, not a function?)
minalib directives
  $END directive on top-level code (do we require it?)
  $EQUF
  $USE (implicit base register)
  $INSERT (maybe)
  $BASE (maybe)
  $IF / $ELSE / $ELSF / $ENDF
  $DO / $ENDD
  $REPEAT / $ENDR
  $FORM
  $GEN
  $INCLUDE (what does this mean for us?)
  $INFO finish the various groups we're going to implement

Mina - wrapper around minalib

Exec - using Mina (or minalib, but hopefully mina)
