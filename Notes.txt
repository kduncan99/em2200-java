-- TODO InProgress

Rebuilding all the hwlib unit tests

Change kasm->exasm, klink->exlink

kasm:$EQUF
  We need the concept of a SubExpression, such that the main expression is made up of
  various subfields in described by a form, and each subfield has a corresponding SubExpression.
  Each SubExpression has a parent expression such that any reference to a label which is an $EQUF
  is then applied to the various subfields of the expression.
  This will be applied at parsing time, such that the actual evaluation need to concern itself with
  such annoyances... this is done by applying the following rules:
    Multiple EQUF references are allowed
    An EQUF reference may only be specified in a U, X, B, or D field
    When encountered in parsing, the EQUF is applied to all SubExpressions in the containing Expression.
    Upon evaluation of a SubExpression **TODO**
    I.... *think* this will work

hwlib:
    InstructionProcessor SYSC console stuff is mostly broken due to code mistakes
    SystemProcessor: loadBinary() Completely rework this
    Test_SystemProcessor: absolute_load test - improve how this works
    Test_Linker: need to fix unit tests


-- TODO BUGS
* kasm
String concatenation does not honor precision per MASM 5.3.1
Locale columns are wrongly all over the place for parsed expressions
  Need to add some unit testing to cover this
See 5.6 - label on a $LIT directive should create a function

* klink
integrateValue() is maybe wrong. See IntegerValue for proper code.

* klink/kasm
Coding LBDIREF$+tag creates a relocated word with a base value of tag's offset from it's LC pool
  When klink resolves it, it adds the BDI to the base value instead of just overlaying it.
  What should we do about this?
    Maybe... klink should, in this case, clear out the field-descriptor described by the reference
    before integrating the BDI value...

* hwlib
ByteChannelModule unit tests - they wait without being notify()able, which slows down IO tests
Check to ensure breakpoints are all working.
UR instruction, bank manipulation, see TODO - need to account for UR to basic mode

everywhere:
    Max real bank size is 0_077777_777777 (with large bit set), which requires a long.
    We have code all over the place which uses an int for bank size, bank addresses, etc.

-- TODO Thoughts
Do we need a high-level language for systems programming to supplement assembly?
It appears that collector-generated absolute elements must always start in Basic mode. ?
"For absolutes that are executed as programs, the Exec loads all banks produced by the Collector at level 2."



-- TODO implement
*html/css/javascript
IPL page
  System status(?)
  Maybe an indication of the number of sessions connected?
  Boot source (binary selection of tape boot, disk boot, other binary boot)
  Path and volume selection for tape and disk boots
Hardware page
  Node configuration, basically
  Move Dump Config button here from the IPL page
  Add button to dump memory contents (optionally with analysis?)
System page
  All the non-hardware related configurables
    Give SPIF the ability to control logging levels
        The following, in Node.java, should be subject to management by SPIF / SoftwareConfiguration
            static final boolean LOG_CHANNEL_IOS = true;
            static final boolean LOG_CHANNEL_IO_BUFFERS = true;
            static final boolean LOG_DEVICE_IOS = true;
            static final boolean LOG_DEVICE_IO_BUFFERS = true;
            static final boolean LOG_IO_ERRORS = true;
OS Configuration page (new page)
  KEXEC configuration items

* every all
Set logger name to foo.class.getSimpleName()

* baselib
more FloatingPointComponent tests

* hardwarelib
SP: Move dayclock architecture to SystemProcessor
IP: SYSC subfunctions need unit tests
CM: ChannelModules should log based on LOG_CHANNEL_IOS and LOG_CHANNEL_IO_BUFFERS (or the config equivalent)
Need a SystemLogTapeDevice
Redo all the node and subclasses tests, many of which are commented out (Node has been done)
For FSTDevice, what to do when we try to read with _writeFlag or _writeMarkFlag set?
Need some unit tests of proper DR settings across interrupts, returns, and UR instruction
RAMDiskDevice word interface, optional dedupe with SHA-256, required backing store
RAMTapeDevice byte interface, optional compression, optional backing store
PrinterDevice
CardReaderDevice
CardPunchDevice
IP: SYSC subfunctions for IO
IP: need more address space management instructions unit tests
IP: basic mode procedure call unit tests for LBJ, LIJ, LDJ for basic and extended mode banks
IP: extended mode procedure call unit tests for GOTO, CALL to basic mode
IP: unit tests for interrupts (many of them already marked TODO)
IP: unit tests
  LIJ, LBJ, LDJ
  LD, SD, LPD, SPD, LUD, SUD, LAE, UR, ACEL, DCEL, SKQT, KCHG
  LRD, SMD, RMD, LMC, SDMN, SDMS, SDMF, RDC
Change unit test extended mode dbanks to start at lower-limit 0 - this *should* work...
For basic mode, no need really to test the bank limits on every fetch - set it once, then save it and use it...
  what to do when we run off the end of the bank?
need some conditional jump tests which would incur reference violation if they jumped
    both jumping (ref violation) and not jumping (no ref violation)
IP: BT instruction and unit tests
IP: UNLK instruction
IP: SPID see new info in newest PRM
IP: operations control instructions (and unit tests)
  SEND
  ACK
IP: special instructions (and unit tests)
  EX
  EXR
  DCB
IP: storage-to-storage instructions (and unit tests) other than BT
  BIM
  BIC
  BIMT
  BICL
  BIML
  BN
  BBN
  BTSP
  BTU
IP: string instructions (and unit tests)
  LS
  LSA
  SS
  TES
  TNES
IP: Queue banks
IP: queuing instructions
  ENQ
  ENQF
  DEQ
  DEQW
  DEPOSITQB
  WITHDRAWQB
IP: system instrumentation instructions
  LBRX
  CJHE
  SJH
IP: floating point binary instructions (and unit tests)
  FA
  FAN
  DFA
  DFAN
  FM
  DFM
  FD
  DFD
  LUF
  DFU
  LCF
  DFP,DLCF
  FEL
  FCL
  MCDU
  CDU
IP: fixed point decimal instructions (and unit tests)
  ADE
  DADE
  SDE
  DSDE
  DEI
  DDEI
  IDE
  DIDE
  BDE
  DEB
  EDDE
IP: search and masked search instructions (and unit tests)
  SE
  SNE
  SNG
  SG
  SW
  SNW
  MSE
  MSNE
  MSLE,MSNG
  MSG
  MSW
  MSNW
  MASL
  MASG

* exlib:
    external file formats for hosting SDFF and PF files (and maybe tape files?)
    support sym, rel, and abs elements
    support various tape file formats
    support SOS VT file format for import/export of tape files

* kasm
Support $EQUF - need to review all of Appendix A of MASM ref, then work on mnemonic generation
Need to support "$(n)" as a relocated reference to location counter n offset by 0 (for expressions)
  Can we implement this as a built-in function?
Do we emit diagnostics at the point where 'S' post-fix operator is applied to a value larger than 36 bits? Or only when we generate code?
more FloatingPointValue unit tests
more unit tests for string value generation
unit tests for node references - need to check results
unit tests for more built-in functions - we're missing a lot of them
support special form for JGD instruction
support special form for BT instruction
support node references on LHS of $EQU statements
need to put partial-words into the dictionary - and should we allow these as expressions in j-field?
remove UndefinedReferenceDiagnostic (I think...)
use DiagnosticDirective for stuff.. now I forgot what this means
do we need microstrings?
$USE (A.2.8) specifies base register to use if none given
can we do implicit base register (and do it right)?  also with the $LIT directive...
support user-defined functions
create object modules directly (has some implications with how kasm generates code)
functions
  $ILCN
  $L0
  $L1
  $LCB
  $LCFV
  $LCN
  $SSS
  $LCV
  $NODE (an empty node - this is maybe a built-in value, not a function?)
directives
  $FUNC (user-defined functions)
  $USE (implicit base register)
  $INSERT (maybe)
  $BASE (maybe)
  $IF / $ELSE / $ELSF / $ENDF
  $DO / $ENDD
  $REPEAT / $ENDR
  $GEN
  $INCLUDE (what does this mean for us?)
  $INFO finish the various groups we're going to implement

* klink
  Create absolute modules
  Create object modules
  Define what a saved binary looks like
    update: It's stored in a sort of JSON format
    update: It's an array of BankDescriptors (stored in JSON format)

* Exec
Subsystems:
  Init
  Console (can we farm this out to SCP?)
  CoreScheduler
  JobScheduler
  IO
  MFD
  ProgFileSystem
  Facilities
  RSI
  Spooler
  Loader (load, swap, etc)
  MemoryMgr
  TIP
  CSI
