-- InProgress

-- TODO BUGS
SLJ instruction - U < 0200 is GRS, U+1 is always storage (we don't do that)
We've broken breakpoint on fetch due to not developing absolute addresses anymore.
BankDescriptor seems to take a very long time to create from storage... why?
Jumps to indirect addresses (in BM) - does the return address reflect the original jump-from,
  or does it wrongly reflect the indirected-to location?
  Applies to all jumps, as well as to LxJ
Check BDI$ function in minalib - do we need it, is it right?

-- TODO implement
* hardwarelib
Our dayclock architecture may not be quite right.  Do we need Dayclock to issue interrupts?  How would that work?
  I mean, we need all the IPs to be interrupted with some periodicity... but... the dayclock is monolithic.
Need to implement master dayclock comparator logic
Need to implement enabling dayclock interrupts, taking them, etc
IP: BT instruction and unit tests
IP,IOP: UPI send/ack mechanism for IOs
  See Interrupt classes 29, 30, 31.  29 is IPL, 30 is activating a 'cleared' IP into a running environment
  And 31 is for... what?  I think we can use that for other processors to tell EXEC that there's something needs
  attention, which I completely missed before.  For 5 years.  <sigh>.
IP: operations control instructions (and unit tests)
  SEND
  ACK
IP: UNLK instruction
IP: SPID see new info
IP: special instructions (and unit tests)
  EX
  EXR
  DCB
IP: need more address space management instructions unit tests
IP: basic mode procedure call unit tests for LBJ, LIJ, LDJ for basic and extended mode banks
IP: extended mode procedure call unit tests for GOTO, CALL to basic mode
IP: unit tests
  LD, SD, LPD, SPD, LUD, SUD, LAE, UR, ACEL, DCEL, SKQT, KCHG
  LRD, SMD, RMD, LMC, SDMN, SDMS, SDMF, RDC
Catch throwables, and turn them into hardware fault machine interrupts
Change extended mode dbanks to start at lower-limit 0 - this *should* work...
For basic mode, no need really to test the bank limits on every fetch - set it once, then save it and use it...
  what to do when we run off the end of the bank?
need some conditional jump tests which would incur reference violation if they jumped
    both jumping (ref violation) and not jumping (no ref violation)
MSP: add support for banks dynamically allocated from native system
IP: IPC instruction for dynamic bank allocation
IP: interrupt processing, use standard bank switching logic
IP: IPC instruction for console communication
SystemControlProcessor: For starting/monitoring/stopping system, and for console communication
IOP: rework IOP, CHMOD, and downstream - lose CU's maybe
Rewrite disk (and maybe tape) devices using async IO
All Device objects: add Builder class, make constructors private
IP: storage-to-storage instructions (and unit tests) other than BT
  BIM
  BIC
  BIMT
  BICL
  BIML
  BN
  BBN
  BTSP
  BTU
IP: string instructions (and unit tests)
  LS
  LSA
  SS
  TES
  TNES
IP: queuing instructions
  ENQ
  ENQF
  DEQ
  DEQW
  DEPOSITQB
  WITHDRAWQB
IP: system instrumentation instructions
  LBRX
  CJHE
  SJH
IP: floating point binary instructions (and unit tests)
  FA
  FAN
  DFA
  DFAN
  FM
  DFM
  FD
  DFD
  LUF
  DFU
  LCF
  DFP,DLCF
  FEL
  FCL
  MCDU
  CDU
IP: floating point conditional jumps (requires floating point instructions to be implemented)
  JFO
  JNFO
  JFU
  JNFU
IP: fixed point decimal instructions (and unit tests)
  ADE
  DADE
  SDE
  DSDE
  DEI
  DDEI
  IDE
  DIDE
  BDE
  DEB
  EDDE
IP: search and masked search instructions (and unit tests)
  SE
  SNE
  SNG
  SG
  SW
  SNW
  MSE
  MSNE
  MSLE,MSNG
  MSG
  MSW
  MSNW
  MASL
  MASG

* minalib
Implement LBDI$ in Linker and Assembler, and maybe other such things
unit tests for string value generation
unit tests for node references - need to check results
support special form for JGD instruction
support special form for BT instruction
support node references on LHS of $EQU statements
need to put partial-words into the dictionary - and should we allow these as expressions in j-field?
remove UndefinedReferenceDiagnostic (I think...)
use DiagnosticDirective for stuff
pick up the rest of the unit tests we need to do but haven't yet
do we need microstrings?
$USE (A.2.8) specifies base register to use if none given
add test cases for interrupts (many of them already marked TODO)
float values - firm this up (how do we support it)
data generation - floats
can we do implicit base register (and do it right)?  also with the $LIT directive...
make sure we don't propagate flagged attribute in any of the operators
support user-defined functions
allow expression list inside literal which is part of expression e.g., ((005, 007) + 12)
functions
  $ILCN
  $L0
  $L1
  $LCB
  $LCFV
  $LCN
  $SSS
  $LCV
  $NODE (an empty node - this is maybe a built-in value, not a function?)
directives
  $END
  $USE (implicit base register)
  $INSERT (maybe)
  $BASE (maybe)
  $IF / $ELSE / $ELSF / $ENDF
  $DO / $ENDD
  $REPEAT / $ENDR
  $FORM
  $GEN
  $INCLUDE (what does this mean for us?)
  $INFO finish the various groups we're going to implement

* Mina - wrapper around minalib

* Exec - using Mina (or minalib, but hopefully mina)
Subsystems:
  Init
  Console (can we farm this out to SCP?)
  CoreScheduler
  JobScheduler
  IO
  MFD
  ProgFileSystem
  Facilities
  RSI
  Spooler
  Loader (load, swap, etc)
  MemoryMgr
  TIP
  CSI
